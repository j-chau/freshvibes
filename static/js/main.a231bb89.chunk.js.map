{"version":3,"sources":["firebase.js","components/HeartCounter.js","components/Posts.js","components/Modal.js","components/NewForm.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HeartCounter","handleClick","id","heartStorage","JSON","parse","window","localStorage","getItem","setItem","setState","prevState","hearts","oldHeart","database","ref","update","state","stringify","this","props","count","className","onClick","tabIndex","Component","Post","header","description","songList","banner","title","author","publishInfo","src","imgUrl","alt","altText","href","photographer","target","rel","map","el","index","urlString","embedId","key","credit","seamless","embedLink","Modal","handleChange","e","searchTerm","value","clearTimeout","timer","setTimeout","doSearch","selectImg","urls","alt_description","user","regular","username","searchArr","APIKey","FOCUSABLE_SELECTORS","main","document","querySelector","modal","focusInMain","querySelectorAll","focusInModal","forEach","setAttribute","removeAttribute","body","style","overflow","Axios","url","method","dataResponse","params","client_id","orientation","per_page","query","then","res","data","results","htmlFor","type","name","onChange","placeholder","required","thumb","closeModal","handleSelect","NewForm","addSongs","addSongList","i","numSongs","push","userInput","addImg","preventDefault","copyState","showImg","handleAdd","newCount","handleSubmit","errMsg","copyStateValues","Object","values","filter","check","undefined","length","indexOf","error","isError","errorMsg","descript","offBtn","rows","maxLength","disabled","aria-disabled","closeForm","App","savePost","currentDate","Date","firebaseArr","getFullYear","getMonth","slice","getDate","copySongList","albumIdStart","albumIdEnd","albumId","linkStart","linkEnd","artistLink","creditEnd","artistCredit","showNew","posts","touchscreen","on","newState","val","unshift","content","navigator","maxTouchPoints","msMaxTouchPoints","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oUAcAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,EC8CeS,E,kDA1DX,aAAe,IAAD,8BACV,gBAqBJC,YAAc,SAACC,GAEX,IAAIC,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,cAErC,OAAjBL,IACAG,OAAOC,aAAaE,QAAQ,YAAa,MACzCN,EAAe,IAGdA,EAAaD,KACd,EAAKQ,UAAS,SAAAC,GAAS,MAAK,CACxBC,OAAQD,EAAUC,OAAS,EAC3BC,UAAU,MACV,WACgBtB,EAASuB,WAAWC,IAAIb,EAAK,WACrCc,OAAO,CAAEJ,OAAQ,EAAKK,MAAML,YAExCT,EAAaD,IAAM,EACnBI,OAAOC,aAAaE,QAAQ,YAAaL,KAAKc,UAAUf,MAtC5D,EAAKc,MAAQ,CACTL,OAAQ,EACRC,UAAU,GAJJ,E,gEASV,IAAMV,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,cACvC,OAAjBL,GACIA,EAAagB,KAAKC,MAAMlB,KACxBiB,KAAKT,SAAS,CACVG,UAAU,IAItBM,KAAKT,SAAS,CACVE,OAAQO,KAAKC,MAAMC,U,+BA0BjB,IAAD,OACL,OACI,yBAAKC,UAAU,kBACX,uBAAGA,UAAU,kBAAkBH,KAAKF,MAAML,QAC1C,uBACIU,UAAW,gBAAkBH,KAAKF,MAAMJ,SAAW,YAAc,IACjEU,QAAS,kBAAM,EAAKtB,YAAY,EAAKmB,MAAMlB,KAC3CsB,SAAU,S,GApDHC,aC+BZC,EA/BF,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,OAAQ5B,EAAS,EAATA,GACnD,OACI,yBAAKoB,UAAU,uBACX,yBAAKA,UAAU,cACX,4BAAKK,EAAOI,OACZ,kBAAC,EAAD,CAAc7B,GAAIA,EAAImB,MAAOM,EAAOf,UAExC,0BAAMU,UAAU,YAAhB,MAA+BK,EAAOK,OAAtC,OAAkDL,EAAOM,aACzD,yBAAKX,UAAU,aACX,yBAAKY,IAAKJ,EAAOK,OAAQC,IAAKN,EAAOO,WAEzC,uBAAGf,UAAU,aAAb,YACa,uBAAGgB,KAAM,yBAA2BR,EAAOS,aAAe,8CAA+CC,OAAO,SAASC,IAAI,uBAAuBX,EAAOS,cADxK,UAEa,uBAAGD,KAAK,mEAAmEE,OAAO,SAASC,IAAI,uBAA/F,aACb,2BAAIb,GACJ,4BACKC,EAASa,KAAI,SAACC,EAAIC,GACf,IAAMC,EAAY,6CAA+CF,EAAGG,QAAU,4DAE9E,OACI,wBAAIxB,UAAU,WAAWyB,IAAKH,GAC1B,4BAAQV,IAAKW,EAAWd,MAAOY,EAAGK,OAAQC,UAAQ,GAC9C,uBAAGX,KAAMK,EAAGO,WAAYP,EAAGK,gB,wBCgG5CG,E,kDApHX,aAAe,IAAD,8BACV,gBAsCJC,aAAe,SAACC,GACZ,EAAK3C,SAAS,CACV4C,WAAYD,EAAEb,OAAOe,QAEzBC,aAAa,EAAKC,OAClB,EAAKA,MAAQC,YAAW,WACpB,EAAKC,aACN,MA9CO,EAmEdC,UAAY,YAAsC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,KAClC,EAAKrD,SAAS,CACVkD,UAAW,CACPzB,OAAQ0B,EAAKG,QACb3B,QAASyB,EACTvB,aAAcwB,EAAKE,aAtE3B,EAAKhD,MAAQ,CACTqC,WAAY,GACZY,UAAW,GACXC,OAAQ,8CACRP,UAAW,CACPzB,OAAQ,GACRE,QAAS,GACTE,aAAc,KATZ,E,gEAiBV,IAAM6B,EAAsB,+KACtBC,EAAOC,SAASC,cAAc,QAC9BC,EAAQF,SAASC,cAAc,mBAC/BE,EAAcJ,EAAKK,iBAAiBN,GACpCO,EAAeH,EAAME,iBAAiBN,GAE5CK,EAAYG,SAAQ,SAAAjC,GAAE,OAAIA,EAAGkC,aAAa,WAAY,SACtDF,EAAaC,SAAQ,SAAAjC,GAAE,OAAIA,EAAGmC,gBAAgB,eAE9CR,SAASS,KAAKC,MAAMC,SAAW,W,6CAKlBX,SAASC,cAAc,QACXG,iBAFG,gLAIhBE,SAAQ,SAAAjC,GAAE,OAAIA,EAAGkC,aAAa,WAAY,QAEtDP,SAASS,KAAKC,MAAMC,SAAW,U,iCAavB,IAAD,OACPC,IAAM,CACFC,IAAK,0CACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACJC,UAAWpE,KAAKF,MAAMkD,OACtBqB,YAAa,YACbC,SAAU,GACVC,MAAOvE,KAAKF,MAAMqC,cAEvBqC,MAAK,SAAAC,GACJ,EAAKlF,SAAS,CACVwD,UAAU,YAAK0B,EAAIC,KAAKC,gB,+BAe1B,IAAD,OACL,OACI,yBAAKxE,UAAU,8BACX,2BAAOyE,QAAQ,aAAazE,UAAU,UAAtC,gBACA,2BAAO0E,KAAK,OACR9F,GAAG,aACHqD,MAAOpC,KAAKF,MAAMqC,WAClB2C,KAAK,SACLC,SAAU/E,KAAKiC,aACf+C,YAAY,sBACZC,UAAQ,IAEZ,yBAAK9E,UAAU,gBACX,yBAAKA,UAAU,iBACVH,KAAKF,MAAMiD,UAAUxB,KAAI,SAAAC,GACtB,OACI,yBAAKI,IAAKJ,EAAGzC,GACTgC,IAAKS,EAAGkB,KAAKwC,MACbjE,IAAKO,EAAGmB,gBACRxC,UAAU,YACVC,QAAS,kBAAM,EAAKqC,UAAUjB,IAC9BnB,SAAU,SAO9B,yBAAKF,UAAU,uBACX,yBAAKY,IAAKf,KAAKF,MAAM2C,UAAUzB,OAAQC,IAAKjB,KAAKF,MAAM2C,UAAUvB,WAErE,6BACI,4BAAQd,QAASJ,KAAKC,MAAMkF,WAAYhF,UAAU,UAAlD,SACA,4BAAQA,UAAU,SAASC,QAAS,SAAC8B,GAAD,OAAO,EAAKjC,MAAMmF,aAAalD,EAAG,EAAKpC,MAAM2C,aAAjF,gB,GA/GAnC,aCuKL+E,E,kDAvKX,aAAe,IAAD,8BACV,gBAoBJC,SAAW,WAEP,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAI,EAAK1F,MAAM2F,SAAUD,IACrCD,EAAYG,KACR,kBAAC,WAAD,CAAU9D,IAAK4D,GACX,2BAAOrF,UAAU,SAASyE,QAAQ,cAAlC,mBACA,2BAAOC,KAAK,OACR9F,GAAG,aACHqD,MAAO,EAAKtC,MAAM6F,UAAUjF,SAAS8E,GACrCV,KAAK,WACLC,SAAU,EAAK9C,aACf+C,YAAY,kBACZC,UAAQ,MAIxB,OAAOM,GArCG,EAwCdK,OAAS,SAAC1D,EAAGO,GACTP,EAAE2D,iBACF,IAAMC,EAAS,eAAQ,EAAKhG,MAAM6F,WAClCG,EAAUnF,OAAV,eAAwB8B,GACxB,EAAKlD,SAAS,CACVoG,UAAWG,EACXC,SAAS,KA9CH,EAkDdZ,WAAa,kBAAM,EAAK5F,SAAS,CAAEwG,SAAS,KAlD9B,EAoDd9D,aAAe,SAACC,GACZ,IAAM4D,EAAS,eAAQ,EAAKhG,MAAM6F,WADhB,EAEMzD,EAAEb,OAAlByD,EAFU,EAEVA,KAAM1C,EAFI,EAEJA,MACD,aAAT0C,EAAqBgB,EAAUpF,SAAS,EAAKZ,MAAM2F,SAAW,GAAKrD,EAClE0D,EAAUhB,GAAQ1C,EACvB,EAAK7C,SAAS,CACVoG,UAAWG,KA1DL,EA8DdE,UAAY,SAAC9D,GAET,GADAA,EAAE2D,iBACE,EAAK/F,MAAM2F,SAAW,EAAG,CACzB,IAAMQ,EAAW,EAAKnG,MAAM2F,SAAW,EACvC,EAAKlG,SAAS,CACVkG,SAAUQ,MAnER,EAwEdC,aAAe,SAAChE,GACZ,IAAIiE,EAAS,GACbjE,EAAE2D,iBAEF,IAAMO,EAAkBC,OAAOC,OAAPD,OAAA,IAAAA,CAAA,GAAmB,EAAKvG,MAAM6F,YAO9B,IANPS,EAAgBG,QAAO,SAAA/E,GACpC,IAAIgF,EAAQhF,EAEZ,YADkBiF,IAAdjF,EAAGkF,SAAsBF,EAAQH,OAAOC,OAAO9E,IAC5CgF,EAAME,OAAS,KAGbA,OAAcP,EAAS,0BAEhCC,EAAgB,GAAG3C,SAAQ,SAAAjC,GACnBA,EAAGmF,QAAQ,+BAAiC,GAAKnF,EAAGkF,OAAS,IAC7DP,EAAS,8CAKC,IAAlBA,EAAOO,OAAc,EAAKzG,MAAMiG,aAAa,EAAKpG,MAAM6F,WACvD,EAAKpG,SAAS,CACfqH,MAAO,CACHC,SAAS,EACTC,SAAUX,MA9FlB,EAAKrG,MAAQ,CACT2F,SAAU,EACVM,SAAS,EACTJ,UAAW,CACP/E,MAAO,GACPC,OAAQ,GACRkG,SAAU,GACVrG,SAAU,GACVC,OAAQ,CACJK,OAAQ,KAGhB4F,MAAO,CACHC,SAAS,EACTC,SAAU,KAhBR,E,qDAsGJ,IAAD,SACuC9G,KAAKF,MAAM6F,UAA/C/E,EADH,EACGA,MAAOC,EADV,EACUA,OAAQkG,EADlB,EACkBA,SAAUpG,EAD5B,EAC4BA,OAC3BqG,IAAShH,KAAKF,MAAM2F,SAAW,GACrC,OACI,oCACKzF,KAAKF,MAAMiG,SACR,oCACI,yBAAK5F,UAAU,YACf,kBAAC,EAAD,CAAOiF,aAAcpF,KAAK4F,OAAQT,WAAYnF,KAAKmF,cAG3D,0BAAMhF,UAAU,qBACZ,2BAAOA,UAAU,SAASyE,QAAQ,cAAlC,cACA,2BAAOC,KAAK,OACR9F,GAAG,YACHqD,MAAOxB,EACPkE,KAAK,QACLC,SAAU/E,KAAKiC,aACf+C,YAAY,aACZC,UAAQ,IAEZ,2BAAO9E,UAAU,SAASyE,QAAQ,eAAlC,aACA,2BAAOC,KAAK,OACR9F,GAAG,cACHqD,MAAOvB,EACPiE,KAAK,SACLC,SAAU/E,KAAKiC,aACf+C,YAAY,cACZC,UAAQ,IAEZ,yBACI9E,UAAW,aAAeQ,EAAOK,OAAO0F,OAAS,EAAI,SAAW,IAChEtG,QAAS,kBAAM,EAAKb,SAAS,CAAEwG,SAAS,KACxC1F,SAAU,GACTM,EAAOK,OAAO0F,OAAS,EAClB,yBAAK3F,IAAKJ,EAAOK,OAAQC,IAAKN,EAAOO,UACrC,wDAIV,2BAAOf,UAAU,SAASyE,QAAQ,gBAAlC,eACA,8BAAUqC,KAAK,IAAIC,UAAU,MACzBnI,GAAG,eACHqD,MAAO2E,EACPjC,KAAK,WACLC,SAAU/E,KAAKiC,aACf+C,YAAY,qGACZC,UAAQ,IAEXjF,KAAKsF,WAEN,6BACI,4BACIlF,QAASJ,KAAKgG,UAAW7F,UAAU,oBAAoBgH,SAAUH,EAAQI,gBAAeJ,GAD5F,iBAGJ,yBAAK7G,UAAU,gBACX,4BAAQC,QAASJ,KAAKC,MAAMoH,UAAWlH,UAAU,UAAjD,UACA,4BAAQ0E,KAAK,SAASzE,QAASJ,KAAKkG,aAAc/F,UAAU,UAA5D,QACA,uBAAGA,UAAW,UAAaH,KAAKF,MAAM8G,MAAMC,QAAe,QAAL,KAAgB7G,KAAKF,MAAM8G,MAAME,iB,GAjKzFxG,aC+GPgH,E,kDAxGb,aAAe,IAAD,8BACZ,gBA0BFC,SAAW,SAAC5B,GAiBV,IAjByB,IACjB/E,EAA8C+E,EAA9C/E,MAAOC,EAAuC8E,EAAvC9E,OAAQkG,EAA+BpB,EAA/BoB,SAAUrG,EAAqBiF,EAArBjF,SAAUC,EAAWgF,EAAXhF,OACrC6G,EAAc,IAAIC,KAEpBC,EAAc,CAChBlH,OAAQ,CACNK,SACAD,QACAE,YALa,UAAM0G,EAAYG,cAAlB,aAAoC,KAAOH,EAAYI,WAAa,IAAIC,OAAO,GAA/E,aAAsF,IAAML,EAAYM,WAAWD,OAAO,IAMvIpI,OAAQ,GAEVgB,YAAasG,EACbrG,SAAU,GACVC,UAGIoH,EAAY,YAAOrH,GAChB8E,EAAI,EAAGA,EAAIuC,EAAarB,OAAQlB,IAAK,CAC5C,IAAMhE,EAAKuG,EAAavC,GAGlBwC,EAAexG,EAAGmF,QAAQ,SAAW,QAAQD,OAAS,EACtDuB,EAAazG,EAAGmF,QAAQ,IAAKqB,GAC7BE,EAAU1G,EAAGqG,MAAMG,EAAcC,GAGjCE,EAAY3G,EAAGmF,QAAQ,WAAa,UAAUD,OAAS,EACvD0B,EAAU5G,EAAGmF,QAAQ,KAAOwB,GAC5BE,EAAa7G,EAAGqG,MAAMM,EAAWC,GAGjCE,EAAY9G,EAAGmF,QAAQ,OAAQyB,GAC/BG,EAAe/G,EAAGqG,MAAMO,EAAU,EAAGE,GAE3CZ,EAAYhH,SAASgF,KAAK,CACxB7D,OAAQ0G,EACR5G,QAASuG,EACTnG,UAAWsG,IAGDjK,EAASuB,WAAWC,MAC5B8F,KAAKgC,GACX,EAAKnI,SAAS,CAAEiJ,SAAS,KAnEzB,EAAK1I,MAAQ,CACX2I,MAAO,GACPD,SAAS,EACTE,aAAa,GALH,E,gEASO,IAAD,OACJtK,EAASuB,WAAWC,MAC5B+I,GAAG,SAAS,SAAAlE,GAChB,IAAMmE,EAAW,GACXlE,EAAOD,EAAIoE,MACjB,IAAK,IAAIrH,KAAMkD,EACbkE,EAASE,QAAQ,CACflH,IAAKJ,EACLuH,QAASrE,EAAKlD,KAGlB,EAAKjC,SAAS,CAAEkJ,MAAOG,QAIpB,iBAAkBzJ,QAAY6J,UAAUC,eAAiB,GAAOD,UAAUE,iBAAmB,IAAIlJ,KAAKT,SAAS,CAAEmJ,aAAa,M,+BAgD3H,IAAD,OACP,OACE,yBAAKvI,UAAU,OACb,wBAAIA,UAAU,SAAd,eAECH,KAAKF,MAAM4I,YAAc,GACvB1I,KAAKF,MAAM0I,QAER,kBAAC,EAAD,CACAnB,UAAW,kBAAM,EAAK9H,SAAS,CAAEiJ,SAAS,KAC1CtC,aAAclG,KAAKuH,WAHnB,4BAAQpH,UAAU,eAAeC,QAAS,kBAAM,EAAKb,SAAS,CAAEiJ,SAAS,MAAzE,SAMLxI,KAAKF,MAAM2I,MAAMlH,KAAI,SAAAC,GAAO,IAAD,EACwBA,EAAGuH,QAA7CvI,EADkB,EAClBA,OAAQC,EADU,EACVA,YAAaC,EADH,EACGA,SAAUC,EADb,EACaA,OACvC,OACE,kBAAC,EAAD,CACEiB,IAAKJ,EAAGI,IACR7C,GAAIyC,EAAGI,IACPpB,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,OAAQA,Y,GA/FJL,aCGE6I,QACW,cAA7BhK,OAAOiK,SAASC,UAEe,UAA7BlK,OAAOiK,SAASC,UAEhBlK,OAAOiK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtG,SAASuG,eAAe,SDyHpB,kBAAmBV,WACrBA,UAAUW,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLoD,QAAQpD,MAAMA,EAAMqD,c","file":"static/js/main.a231bb89.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCcjQZCdsuQzcdA9Zk1-xvJ43qLM3Nl4ho\",\r\n    authDomain: \"fresh-vibes.firebaseapp.com\",\r\n    databaseURL: \"https://fresh-vibes.firebaseio.com\",\r\n    projectId: \"fresh-vibes\",\r\n    storageBucket: \"fresh-vibes.appspot.com\",\r\n    messagingSenderId: \"772541813549\",\r\n    appId: \"1:772541813549:web:ae9aa0c6ce4b542ffd39a4\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from './../firebase.js';\r\n\r\nclass HeartCounter extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hearts: 0,\r\n            oldHeart: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const heartStorage = JSON.parse(window.localStorage.getItem(\"heartsLog\"));\r\n        if (heartStorage !== null) {\r\n            if (heartStorage[this.props.id]) {\r\n                this.setState({\r\n                    oldHeart: true\r\n                })\r\n            }\r\n        }\r\n        this.setState({\r\n            hearts: this.props.count\r\n        })\r\n    }\r\n\r\n    handleClick = (id) => {\r\n        // using localStorage to limit number of hearts per computer/user to 1\r\n        let heartStorage = JSON.parse(window.localStorage.getItem(\"heartsLog\"));\r\n\r\n        if (heartStorage === null) {\r\n            window.localStorage.setItem(\"heartsLog\", \"{}\");\r\n            heartStorage = {};\r\n        }\r\n\r\n        if (!heartStorage[id]) {\r\n            this.setState(prevState => ({\r\n                hearts: prevState.hearts + 1,\r\n                oldHeart: true\r\n            }), () => {\r\n                const postRef = firebase.database().ref(id + \"/header\");\r\n                postRef.update({ hearts: this.state.hearts })\r\n            })\r\n            heartStorage[id] = true;\r\n            window.localStorage.setItem(\"heartsLog\", JSON.stringify(heartStorage));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"heartContainer\">\r\n                <p className=\"counterDisplay\">{this.state.hearts}</p>\r\n                <i\r\n                    className={\"fas fa-heart\" + (this.state.oldHeart ? \" oldHeart\" : \"\")}\r\n                    onClick={() => this.handleClick(this.props.id)}\r\n                    tabIndex={0}\r\n                ></i>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeartCounter;\r\n","import React from 'react';\r\nimport HeartCounter from './HeartCounter';\r\n\r\nconst Post = ({ header, description, songList, banner, id }) => {\r\n    return (\r\n        <div className=\"block postContainer\">\r\n            <div className=\"postHeader\">\r\n                <h2>{header.title}</h2>\r\n                <HeartCounter id={id} count={header.hearts} />\r\n            </div>\r\n            <span className=\"postInfo\">by {header.author} on {header.publishInfo}</span>\r\n            <div className=\"bannerImg\">\r\n                <img src={banner.imgUrl} alt={banner.altText} />\r\n            </div>\r\n            <p className=\"imgCredit\">\r\n                Photo by <a href={\"https://unsplash.com/@\" + banner.photographer + \"?utm_source=fresh_vibes&utm_medium=referral\"} target=\"_blank\" rel=\"noopener noreferrer\">{banner.photographer}</a>\r\n                &nbsp;on <a href=\"https://unsplash.com/?utm_source=fresh_vibes&utm_medium=referral\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></p>\r\n            <p>{description}</p>\r\n            <ul>\r\n                {songList.map((el, index) => {\r\n                    const urlString = \"https://bandcamp.com/EmbeddedPlayer/album=\" + el.embedId + \"/size=small/bgcol=f5f1ea/linkcol=0687f5/transparent=true/\";\r\n\r\n                    return (\r\n                        <li className=\"songInfo\" key={index}>\r\n                            <iframe src={urlString} title={el.credit} seamless>\r\n                                <a href={el.embedLink}>{el.credit}</a>\r\n                            </iframe>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n\r\n","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\n\r\n\r\nclass Modal extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            searchTerm: '',\r\n            searchArr: [],\r\n            APIKey: \"UTVmOX5KTgYoWwFFdjDBBDvIbovGexTDgITSGWjrC3c\",\r\n            selectImg: {\r\n                imgUrl: '',\r\n                altText: '',\r\n                photographer: '',\r\n            }\r\n        }\r\n    }\r\n\r\n    // code to show / hide elements from assistive tech from here: https://codepen.io/noahblon/pen/yJpXka\r\n\r\n    componentDidMount() {\r\n        const FOCUSABLE_SELECTORS = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\r\n        const main = document.querySelector('body');\r\n        const modal = document.querySelector('.modalContainer');\r\n        const focusInMain = main.querySelectorAll(FOCUSABLE_SELECTORS);\r\n        const focusInModal = modal.querySelectorAll(FOCUSABLE_SELECTORS);\r\n\r\n        focusInMain.forEach(el => el.setAttribute('tabindex', '-1'));\r\n        focusInModal.forEach(el => el.removeAttribute('tabindex'));\r\n\r\n        document.body.style.overflow = \"hidden\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const FOCUSABLE_SELECTORS = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\r\n        const main = document.querySelector('body');\r\n        const focusInMain = main.querySelectorAll(FOCUSABLE_SELECTORS);\r\n\r\n        focusInMain.forEach(el => el.setAttribute('tabindex', '0'));\r\n\r\n        document.body.style.overflow = \"unset\";\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            searchTerm: e.target.value\r\n        })\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n            this.doSearch();\r\n        }, 1000)\r\n\r\n    }\r\n    doSearch() {\r\n        Axios({\r\n            url: \"https://api.unsplash.com/search/photos/\",\r\n            method: \"GET\",\r\n            dataResponse: \"json\",\r\n            params: {\r\n                client_id: this.state.APIKey,\r\n                orientation: \"landscape\",\r\n                per_page: 12,\r\n                query: this.state.searchTerm\r\n            }\r\n        }).then(res => {\r\n            this.setState({\r\n                searchArr: [...res.data.results]\r\n            })\r\n        })\r\n    }\r\n\r\n    selectImg = ({ urls, alt_description, user }) => {\r\n        this.setState({\r\n            selectImg: {\r\n                imgUrl: urls.regular,\r\n                altText: alt_description,\r\n                photographer: user.username\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modalContainer newBtn form\">\r\n                <label htmlFor=\"searchText\" className=\"srOnly\">Search image</label>\r\n                <input type=\"text\"\r\n                    id=\"searchText\"\r\n                    value={this.state.searchTerm}\r\n                    name=\"author\"\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Search for an image\"\r\n                    required />\r\n\r\n                <div className=\"unsplashImgs\">\r\n                    <div className=\"unsplashInner\">\r\n                        {this.state.searchArr.map(el => {\r\n                            return (\r\n                                <img key={el.id}\r\n                                    src={el.urls.thumb}\r\n                                    alt={el.alt_description}\r\n                                    className=\"imgThumbs\"\r\n                                    onClick={() => this.selectImg(el)}\r\n                                    tabIndex={0}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"selectImg bannerImg\">\r\n                    <img src={this.state.selectImg.imgUrl} alt={this.state.selectImg.altText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={this.props.closeModal} className=\"delBtn\">close</button>\r\n                    <button className=\"impBtn\" onClick={(e) => this.props.handleSelect(e, this.state.selectImg)}>select</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Modal;","import React, { Component, Fragment } from 'react';\r\nimport Modal from './Modal.js'\r\n\r\nclass NewForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            numSongs: 1,\r\n            showImg: false,\r\n            userInput: {\r\n                title: '',\r\n                author: '',\r\n                descript: '',\r\n                songList: [],\r\n                banner: {\r\n                    imgUrl: ''\r\n                }\r\n            },\r\n            error: {\r\n                isError: false,\r\n                errorMsg: ''\r\n            },\r\n        }\r\n    }\r\n\r\n    addSongs = () => {\r\n        let addSongList = [];\r\n        for (let i = 0; i < this.state.numSongs; i++) {\r\n            addSongList.push(\r\n                <Fragment key={i}>\r\n                    <label className=\"srOnly\" htmlFor=\"inputEmbed\">Song Embed Code</label>\r\n                    <input type=\"text\"\r\n                        id=\"inputEmbed\"\r\n                        value={this.state.userInput.songList[i]}\r\n                        name=\"songList\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Song Embed Code\"\r\n                        required />\r\n                </Fragment>\r\n            )\r\n        }\r\n        return addSongList;\r\n    }\r\n\r\n    addImg = (e, selectImg) => {\r\n        e.preventDefault();\r\n        const copyState = { ...this.state.userInput };\r\n        copyState.banner = { ...selectImg }\r\n        this.setState({\r\n            userInput: copyState,\r\n            showImg: false\r\n        })\r\n    }\r\n\r\n    closeModal = () => this.setState({ showImg: false });\r\n\r\n    handleChange = (e) => {\r\n        const copyState = { ...this.state.userInput };\r\n        const { name, value } = e.target;\r\n        if (name === \"songList\") copyState.songList[this.state.numSongs - 1] = value;\r\n        else copyState[name] = value;\r\n        this.setState({\r\n            userInput: copyState\r\n        })\r\n    }\r\n\r\n    handleAdd = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.numSongs < 3) {\r\n            const newCount = this.state.numSongs + 1;\r\n            this.setState({\r\n                numSongs: newCount\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        let errMsg = \"\";\r\n        e.preventDefault();\r\n\r\n        const copyStateValues = Object.values({ ...this.state.userInput });\r\n        const errCheck = copyStateValues.filter(el => {\r\n            let check = el;\r\n            if (el.length === undefined) check = Object.values(el);\r\n            return check.length > 0\r\n        });\r\n\r\n        if (errCheck.length !== 5) errMsg = \"all fields are required\";\r\n        else {\r\n            copyStateValues[3].forEach(el => {\r\n                if (el.indexOf(\"bandcamp.com/EmbeddedPlayer\") < 0 && el.length > 0) {\r\n                    errMsg = \"please use the embed code from bandcamp\";\r\n                }\r\n            })\r\n        }\r\n\r\n        if (errMsg.length === 0) this.props.handleSubmit(this.state.userInput);\r\n        else this.setState({\r\n            error: {\r\n                isError: true,\r\n                errorMsg: errMsg\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        const { title, author, descript, banner } = this.state.userInput;\r\n        const offBtn = this.state.numSongs < 3 ? false : true;\r\n        return (\r\n            <>\r\n                {this.state.showImg && (\r\n                    <>\r\n                        <div className=\"modalBg\"></div>\r\n                        <Modal handleSelect={this.addImg} closeModal={this.closeModal} />\r\n                    </>\r\n                )}\r\n                <form className=\"block newBtn form\">\r\n                    <label className=\"srOnly\" htmlFor=\"inputTitle\">Post Title</label>\r\n                    <input type=\"text\"\r\n                        id=\"postTitle\"\r\n                        value={title}\r\n                        name=\"title\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Post Title\"\r\n                        required />\r\n\r\n                    <label className=\"srOnly\" htmlFor=\"inputAuthor\">Your Name</label>\r\n                    <input type=\"text\"\r\n                        id=\"inputAuthor\"\r\n                        value={author}\r\n                        name=\"author\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Author Name\"\r\n                        required />\r\n\r\n                    <div\r\n                        className={\"bannerImg\" + (banner.imgUrl.length < 1 ? \" noImg\" : \"\")}\r\n                        onClick={() => this.setState({ showImg: true })}\r\n                        tabIndex={0}>\r\n                        {banner.imgUrl.length > 1\r\n                            ? <img src={banner.imgUrl} alt={banner.altText} />\r\n                            : <p>Click to select an image</p>\r\n                        }\r\n                    </div>\r\n\r\n                    <label className=\"srOnly\" htmlFor=\"inputDescrip\">Description</label>\r\n                    <textarea rows=\"7\" maxLength=\"500\"\r\n                        id=\"inputDescrip\"\r\n                        value={descript}\r\n                        name=\"descript\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"add a description about your song or album selection. let others konw what kind of mood to expect.\"\r\n                        required></textarea>\r\n\r\n                    {this.addSongs()}\r\n\r\n                    <div>\r\n                        <button\r\n                            onClick={this.handleAdd} className=\"impBtn addSongBtn\" disabled={offBtn} aria-disabled={offBtn}>add new song</button>\r\n                    </div>\r\n                    <div className=\"btnContainer\">\r\n                        <button onClick={this.props.closeForm} className=\"delBtn\">delete</button>\r\n                        <button type=\"submit\" onClick={this.handleSubmit} className=\"impBtn\">post</button>\r\n                        <p className={\"errMsg\" + (!this.state.error.isError ? \"\" : \" show\")}>{this.state.error.errorMsg}</p>\r\n                    </div>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default NewForm;","import './App.css';\r\nimport './Modal.css'\r\n\r\nimport React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nimport Post from './components/Posts.js';\r\nimport NewForm from './components/NewForm.js';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      posts: [],\r\n      showNew: false,\r\n      touchscreen: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", res => {\r\n      const newState = [];\r\n      const data = res.val();\r\n      for (let el in data) {\r\n        newState.unshift({\r\n          key: el,\r\n          content: data[el]\r\n        })\r\n      }\r\n      this.setState({ posts: newState })\r\n    });\r\n\r\n    // checks if device is using touchscreen (no access to bandcamp's embed codes when using bandcamp.com on touch enabled/mobile devices)\r\n    if (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)) this.setState({ touchscreen: true })\r\n  }\r\n\r\n  savePost = (userInput) => {\r\n    const { title, author, descript, songList, banner } = userInput;\r\n    const currentDate = new Date();\r\n    const publishDate = `${currentDate.getFullYear()}-${(\"0\" + (currentDate.getMonth() + 1)).slice(-2)}-${(\"0\" + currentDate.getDate()).slice(-2)}`\r\n    let firebaseArr = {\r\n      header: {\r\n        author,\r\n        title,\r\n        publishInfo: publishDate,\r\n        hearts: 0\r\n      },\r\n      description: descript,\r\n      songList: [],\r\n      banner\r\n    }\r\n\r\n    const copySongList = [...songList];\r\n    for (let i = 0; i < copySongList.length; i++) {\r\n      const el = copySongList[i]\r\n\r\n      // get album id\r\n      const albumIdStart = el.indexOf(\"album\") + \"album\".length + 1;\r\n      const albumIdEnd = el.indexOf(\"/\", albumIdStart);\r\n      const albumId = el.slice(albumIdStart, albumIdEnd);\r\n\r\n      // get artist link\r\n      const linkStart = el.indexOf(\"<a href\") + \"<a href\".length + 2;\r\n      const linkEnd = el.indexOf(\"\\\">\", linkStart);\r\n      const artistLink = el.slice(linkStart, linkEnd);\r\n\r\n      // get artist credit\r\n      const creditEnd = el.indexOf(\"</a>\", linkEnd);\r\n      const artistCredit = el.slice(linkEnd + 2, creditEnd);\r\n\r\n      firebaseArr.songList.push({\r\n        credit: artistCredit,\r\n        embedId: albumId,\r\n        embedLink: artistLink\r\n      })\r\n    }\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.push(firebaseArr);\r\n    this.setState({ showNew: false })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"block\">fresh vibes</h1>\r\n\r\n        {this.state.touchscreen ? \"\" :\r\n          !this.state.showNew\r\n            ? <button className=\"block newBtn\" onClick={() => this.setState({ showNew: true })}>+ New</button>\r\n            : <NewForm\r\n              closeForm={() => this.setState({ showNew: false })}\r\n              handleSubmit={this.savePost}\r\n            />}\r\n\r\n        {this.state.posts.map(el => {\r\n          const { header, description, songList, banner } = el.content;\r\n          return (\r\n            <Post\r\n              key={el.key}\r\n              id={el.key}\r\n              header={header}\r\n              description={description}\r\n              songList={songList}\r\n              banner={banner}\r\n            />\r\n          )\r\n        })}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}