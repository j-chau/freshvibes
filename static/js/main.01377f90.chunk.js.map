{"version":3,"sources":["firebase.js","components/HeartCounter.js","components/Posts.js","components/Modal.js","components/NewForm.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HeartCounter","handleClick","id","heartStorage","JSON","parse","window","localStorage","getItem","setItem","setState","prevState","hearts","oldHeart","database","ref","update","state","stringify","this","props","count","className","onClick","tabIndex","Component","Post","header","description","songList","banner","title","author","publishInfo","src","imgUrl","alt","altText","href","photographer","target","rel","map","el","index","urlString","embedId","key","credit","seamless","embedLink","Modal","handleChange","e","searchTerm","value","clearTimeout","timer","setTimeout","doSearch","selectImg","urls","alt_description","user","regular","username","searchArr","APIKey","Axios","url","method","dataResponse","params","client_id","orientation","per_page","query","then","res","data","results","htmlFor","type","name","onChange","placeholder","required","thumb","handleSelect","NewForm","addSongs","addSongList","i","numSongs","push","userInput","addImg","preventDefault","copyState","showImg","handleAdd","newCount","console","log","descript","Object","keys","length","rows","maxLength","closeForm","handleSubmit","App","savePost","currentDate","Date","firebaseArr","getFullYear","getMonth","slice","getDate","copySongList","albumIdStart","indexOf","albumIdEnd","albumId","linkStart","linkEnd","artistLink","creditEnd","artistCredit","showNew","posts","on","newState","val","unshift","content","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01377f90.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCcjQZCdsuQzcdA9Zk1-xvJ43qLM3Nl4ho\",\r\n    authDomain: \"fresh-vibes.firebaseapp.com\",\r\n    databaseURL: \"https://fresh-vibes.firebaseio.com\",\r\n    projectId: \"fresh-vibes\",\r\n    storageBucket: \"fresh-vibes.appspot.com\",\r\n    messagingSenderId: \"772541813549\",\r\n    appId: \"1:772541813549:web:ae9aa0c6ce4b542ffd39a4\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from './../firebase.js';\r\n\r\nclass HeartCounter extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hearts: 0,\r\n            oldHeart: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const heartStorage = JSON.parse(window.localStorage.getItem(\"heartsLog\"));\r\n        if (heartStorage !== null) {\r\n            if (heartStorage[this.props.id]) {\r\n                this.setState({\r\n                    oldHeart: true\r\n                })\r\n            }\r\n        }\r\n        this.setState({\r\n            hearts: this.props.count\r\n        })\r\n    }\r\n\r\n    handleClick = (id) => {\r\n        // using localStorage to limit number of hearts per computer/user to 1\r\n        let heartStorage = JSON.parse(window.localStorage.getItem(\"heartsLog\"));\r\n\r\n        if (heartStorage === null) {\r\n            window.localStorage.setItem(\"heartsLog\", \"{}\");\r\n            heartStorage = {};\r\n        }\r\n\r\n        if (!heartStorage[id]) {\r\n            this.setState(prevState => ({\r\n                hearts: prevState.hearts + 1,\r\n                oldHeart: true\r\n            }), () => {\r\n                const postRef = firebase.database().ref(id + \"/header\");\r\n                postRef.update({ hearts: this.state.hearts })\r\n            })\r\n            heartStorage[id] = true;\r\n            window.localStorage.setItem(\"heartsLog\", JSON.stringify(heartStorage));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"heartContainer\">\r\n                <p className=\"counterDisplay\">{this.state.hearts}</p>\r\n                <i\r\n                    className={\"fas fa-heart\" + (this.state.oldHeart ? \" oldHeart\" : \"\")}\r\n                    onClick={() => this.handleClick(this.props.id)}\r\n                    tabIndex={0}\r\n                ></i>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeartCounter;\r\n","import React from 'react';\r\nimport HeartCounter from './HeartCounter';\r\n\r\nconst Post = ({ header, description, songList, banner, id }) => {\r\n    return (\r\n        <div className=\"block postContainer\">\r\n            <div className=\"postHeader\">\r\n                <h2>{header.title}</h2>\r\n                <HeartCounter id={id} count={header.hearts} />\r\n            </div>\r\n            <span className=\"postInfo\">by {header.author} on {header.publishInfo}</span>\r\n            <div className=\"bannerImg\">\r\n                <img src={banner.imgUrl} alt={banner.altText} />\r\n            </div>\r\n            <p className=\"imgCredit\">\r\n                Photo by <a href={\"https://unsplash.com/@\" + banner.photographer + \"?utm_source=fresh_vibes&utm_medium=referral\"} target=\"_blank\" rel=\"noopener noreferrer\">{banner.photographer}</a>\r\n                &nbsp;on <a href=\"https://unsplash.com/?utm_source=fresh_vibes&utm_medium=referral\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></p>\r\n            <p>{description}</p>\r\n            <ul>\r\n                {songList.map((el, index) => {\r\n                    const urlString = \"https://bandcamp.com/EmbeddedPlayer/album=\" + el.embedId + \"/size=small/bgcol=f5f1ea/linkcol=0687f5/transparent=true/\";\r\n\r\n                    return (\r\n                        <li className=\"songInfo\" key={index}>\r\n                            <iframe src={urlString} title={el.credit} seamless>\r\n                                <a href={el.embedLink}>{el.credit}</a>\r\n                            </iframe>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n\r\n","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\n\r\n\r\nclass Modal extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            searchTerm: '',\r\n            searchArr: [],\r\n            APIKey: \"UTVmOX5KTgYoWwFFdjDBBDvIbovGexTDgITSGWjrC3c\",\r\n            selectImg: {\r\n                imgUrl: '',\r\n                altText: '',\r\n                photographer: '',\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            searchTerm: e.target.value\r\n        })\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n            this.doSearch();\r\n        }, 1500)\r\n\r\n    }\r\n    doSearch() {\r\n        Axios({\r\n            url: \"https://api.unsplash.com/search/photos/\",\r\n            method: \"GET\",\r\n            dataResponse: \"json\",\r\n            params: {\r\n                client_id: this.state.APIKey,\r\n                orientation: \"landscape\",\r\n                per_page: 12,\r\n                query: this.state.searchTerm\r\n            }\r\n        }).then(res => {\r\n            this.setState({\r\n                searchArr: [...res.data.results]\r\n            })\r\n        })\r\n    }\r\n\r\n    selectImg = ({ urls, alt_description, user }) => {\r\n        this.setState({\r\n            selectImg: {\r\n                imgUrl: urls.regular,\r\n                altText: alt_description,\r\n                photographer: user.username\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modalContainer newBtn\">\r\n                <form className=\"modalForm\">\r\n                    <label htmlFor=\"searchText\" className=\"srOnly\">Search image</label>\r\n                    <input type=\"text\"\r\n                        id=\"searchText\"\r\n                        value={this.state.searchTerm}\r\n                        name=\"author\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Search for an image\"\r\n                        required />\r\n\r\n                    <div className=\"unsplashImgs\">\r\n                        <div className=\"unsplashInner\">\r\n                            {this.state.searchArr.map(el => {\r\n                                return (\r\n                                    <img key={el.id}\r\n                                        src={el.urls.thumb}\r\n                                        alt={el.alt_description}\r\n                                        className=\"imgThumbs\"\r\n                                        onClick={() => this.selectImg(el)}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"selectImg bannerImg\">\r\n                        <img src={this.state.selectImg.imgUrl} alt={this.state.selectImg.altText} />\r\n                    </div>\r\n\r\n                    <button className=\"impBtn\" onClick={(e) => this.props.handleSelect(e, this.state.selectImg)}>select</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Modal;","import React, { Component, Fragment } from 'react';\r\nimport Modal from './Modal.js'\r\n\r\n// on submit, only grab album id\r\n// pick bg colour and link colour\r\n\r\n\r\nclass NewForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            numSongs: 1,\r\n            showImg: false,\r\n            userInput: {\r\n                title: '',\r\n                author: '',\r\n                descript: '',\r\n                songList: [],\r\n                banner: {}\r\n            }\r\n        }\r\n    }\r\n\r\n    addSongs = () => {\r\n        let addSongList = [];\r\n        for (let i = 0; i < this.state.numSongs; i++) {\r\n            addSongList.push(\r\n                <Fragment key={i}>\r\n                    <label className=\"srOnly\" htmlFor=\"inputEmbed\">Song Embed Code</label>\r\n                    <input type=\"text\"\r\n                        id=\"inputEmbed\"\r\n                        value={this.state.userInput.songList[i]}\r\n                        name=\"songList\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Song Embed Code\"\r\n                        required />\r\n                </Fragment>\r\n            )\r\n        }\r\n        return addSongList;\r\n    }\r\n\r\n    addImg = (e, selectImg) => {\r\n        e.preventDefault();\r\n        const copyState = { ...this.state.userInput };\r\n        copyState.banner = { ...selectImg }\r\n        this.setState({\r\n            userInput: copyState,\r\n            showImg: false\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const copyState = { ...this.state.userInput };\r\n        const { name, value } = e.target;\r\n        // TODO: try using prevState to avoid Warning\r\n        if (name === \"songList\") copyState.songList[this.state.numSongs - 1] = value;\r\n        else copyState[name] = value;\r\n        this.setState({\r\n            userInput: copyState\r\n        })\r\n    }\r\n\r\n    handleAdd = (e) => {\r\n        // TODO: preventDefault not working?\r\n        e.preventDefault();\r\n        if (this.state.numSongs < 3) {\r\n            const newCount = this.state.numSongs + 1;\r\n            this.setState({\r\n                numSongs: newCount\r\n            })\r\n            // TODO: add error message\r\n        } else console.log(\"false\");\r\n    }\r\n\r\n    render() {\r\n        const { title, author, descript, banner } = this.state.userInput;\r\n        return (\r\n            <>\r\n                {this.state.showImg && (\r\n                    <>\r\n                        <div className=\"modalBg\"></div>\r\n                        <Modal handleSelect={this.addImg} />\r\n                    </>\r\n                )}\r\n                <form className=\"block newBtn\">\r\n                    <label className=\"srOnly\" htmlFor=\"inputTitle\">Post Title</label>\r\n                    <input type=\"text\"\r\n                        id=\"postTitle\"\r\n                        value={title}\r\n                        name=\"title\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Post Title\"\r\n                        required />\r\n\r\n                    <label className=\"srOnly\" htmlFor=\"inputAuthor\">Your Name</label>\r\n                    <input type=\"text\"\r\n                        id=\"inputAuthor\"\r\n                        value={author}\r\n                        name=\"author\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Author Name\"\r\n                        required />\r\n\r\n                    <div className=\"bannerImg noImg\" onClick={() => this.setState({ showImg: true })} tabIndex={0}>\r\n                        {Object.keys(banner).length > 0\r\n                            ? <img src={banner.imgUrl} alt={banner.altText} />\r\n                            : <p>Click to select an image</p>\r\n                        }\r\n                    </div>\r\n\r\n                    <label className=\"srOnly\" htmlFor=\"inputDescrip\">Description</label>\r\n                    <textarea rows=\"7\" maxLength=\"500\"\r\n                        id=\"inputDescrip\"\r\n                        value={descript}\r\n                        name=\"descript\"\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"add a description about your song or album selection. let others konw what kind of mood to expect.\"\r\n                        required></textarea>\r\n\r\n                    {this.addSongs()}\r\n\r\n                    <div className=\"btnContainer\">\r\n                        <button onClick={this.handleAdd} className=\"impBtn\">add new song</button>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={this.props.closeForm} className=\"delBtn\">delete</button>\r\n                        <button onClick={() => { this.setState({ numSongs: 1 }); this.props.handleSubmit(this.state.userInput) }} className=\"impBtn\">post</button>\r\n                    </div>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default NewForm;","import './App.css';\r\nimport './Modal.css'\r\n\r\nimport React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nimport Post from './components/Posts.js';\r\nimport NewForm from './components/NewForm.js';\r\n\r\n// click for new post:\r\n//  x new post form expands from button -> form component\r\n//    o add transitions\r\n//  x onClick newButton trigger function to intake user data\r\n//  x Unsplash API call made when title loses focus after text input\r\n//  o use 'novalidate' and 'required' to set required fields with custom error messages\r\n//  x onClick delete: clear form and close form\r\n//  x onClick post: add date and time to data, push user data to firebase\r\n// likeCounter: \r\n//  x increment on click\r\n//  x push value to firebase\r\n//  x use localStorage to lock one like per user\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      posts: [],\r\n      showNew: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", res => {\r\n      const newState = [];\r\n      const data = res.val();\r\n      for (let el in data) {\r\n        newState.unshift({\r\n          key: el,\r\n          content: data[el]\r\n        })\r\n      }\r\n      this.setState({\r\n        posts: newState\r\n      })\r\n    });\r\n  }\r\n\r\n  savePost = (userInput) => {\r\n    const { title, author, descript, songList, banner } = userInput;\r\n    const currentDate = new Date();\r\n    const publishDate = `${currentDate.getFullYear()}-${(\"0\" + (currentDate.getMonth() + 1)).slice(-2)}-${(\"0\" + currentDate.getDate()).slice(-2)}`\r\n    let firebaseArr = {\r\n      header: {\r\n        author,\r\n        title,\r\n        publishInfo: publishDate,\r\n        hearts: 0\r\n      },\r\n      description: descript,\r\n      songList: [],\r\n      banner\r\n    }\r\n\r\n    const copySongList = [...songList];\r\n    for (let i = 0; i < copySongList.length; i++) {\r\n      const el = copySongList[i]\r\n\r\n      // get album id\r\n      const albumIdStart = el.indexOf(\"album\") + \"album\".length + 1;\r\n      const albumIdEnd = el.indexOf(\"/\", albumIdStart);\r\n      const albumId = el.slice(albumIdStart, albumIdEnd);\r\n\r\n      // get artist link\r\n      const linkStart = el.indexOf(\"<a href\") + \"<a href\".length + 2;\r\n      const linkEnd = el.indexOf(\"\\\">\", linkStart);\r\n      const artistLink = el.slice(linkStart, linkEnd);\r\n\r\n      // get artist credit\r\n      const creditEnd = el.indexOf(\"</a>\", linkEnd);\r\n      const artistCredit = el.slice(linkEnd + 2, creditEnd);\r\n\r\n      firebaseArr.songList.push({\r\n        credit: artistCredit,\r\n        embedId: albumId,\r\n        embedLink: artistLink\r\n      })\r\n    }\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.push(firebaseArr);\r\n    this.setState({\r\n      showNew: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        < h1 className=\"block\">fresh vibes</h1>\r\n        {!this.state.showNew\r\n          ? <button className=\"block newBtn\" onClick={() => this.setState({ showNew: true })}>+ New</button>\r\n          : <NewForm\r\n            closeForm={() => this.setState({ showNew: false })}\r\n            handleSubmit={this.savePost}\r\n          />}\r\n        {this.state.posts.map(el => {\r\n          const { header, description, songList, banner } = el.content;\r\n          return (\r\n            <Post\r\n              key={el.key}\r\n              id={el.key}\r\n              header={header}\r\n              description={description}\r\n              songList={songList}\r\n              banner={banner}\r\n            />\r\n          )\r\n        })}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}